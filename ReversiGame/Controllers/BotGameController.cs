using ReversiGame.Models;
using ReversiGame.Views;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Timers;

namespace ReversiGame.Controllers
{
    public class BotGameController : IGameController
    {
        private readonly Board board;
        private readonly Player player1;
        private readonly Player player2;
        private Player currentPlayer;
        private Mode mode;
        private bool withHint;
        private bool newGame;
        private readonly IView currentView;
        private ViewModel viewModel;
        private IBot bot;
        private Stopwatch stopwatch;
        public BotGameController(IView view)
        {
            board = new Board();
            stopwatch = new Stopwatch();
            player1 = new Player('X', "Player 1");
            player2 = new Player('O', "Bot");
            currentPlayer = player1;
            mode = new Mode("PvE");
            withHint = false;
            newGame = false;
            currentView = view;
            viewModel = new ViewModel();
            viewModel.gridSize = Board.Size;
            bot = new Bot(board,player2.Symbol);
        }
        public void StartGame()
        {
            Console.WriteLine("Select the bot difficulty");
            Console.WriteLine(" - simple");
            Console.WriteLine(" - hard ");
            string val = Console.ReadLine();
            if (val == "hard")
            {
                bot = new HardBot(board, player2.Symbol);
            }

            stopwatch.Start();
            while (!newGame)
            {
                
                

                // select a board to display 
                viewModel.board = withHint ? board.GetGridWithHint(currentPlayer.Symbol) : board.GetGrid();

                PlayerMove();
                // The method checks if the game is over, if the game is over,
                // it displays a message and starts a new game.
                GameEnded();
            }
        }

        
        public void CheckAction(string? cline)
        {
            if (cline != null)
            {
                string[] items = cline.Split(' ');
                switch (items[0])
                {
                    case "move":
                        if (items.Length > 1)
                        {
                            if (items[1].Length == 2)
                            {
                                if (currentPlayer.Name != "Bot") board.SaveBackupGrid();
                                MakeMove(items[1]);
                            }
                        }
                        break;
                    case "hint":
                        withHint = true;
                        break;
                    case "undo":
                        board.RestoreGrid();
                        //SwitchPlayer();
                        break;
                    case "skip":
                        SwitchPlayer();
                        break;
                    case "quit":
                        newGame = true;
                        break;
                }
            }

        }

        private void PlayerMove()
        {
            viewModel.currentPlayer = currentPlayer.Symbol;
            viewModel.message = ReversiMessage.PlayerTurn;
            currentView.Display(viewModel);
            withHint = false;
            // Reading the command input
            

            //Entering a command. If it is the bot's turn,
            //the command is generated by the method
            string cline = currentPlayer.Name != "Bot" ? currentView.GetPlayerInput() : bot.ChooseMove();
            
            // Command processing
            CheckAction(cline);

 
            
        }
        public void MakeMove(string coords)
        {
            // Create a new object move
            Move move = new Move(coords, currentPlayer.Symbol);
            if (board.IsValidMove(move.Row, move.Col, currentPlayer.Symbol))
            {
                board.MakeMove(move.Row, move.Col, currentPlayer.Symbol);
                viewModel.currentPlayer = currentPlayer.Symbol;
                viewModel.message = ReversiMessage.PlayerTurn;
                currentView.Display(viewModel);
                SwitchPlayer();
            }
            else
            {
                viewModel.currentPlayer = currentPlayer.Symbol;
                viewModel.message = ReversiMessage.InvalidInput;
                currentView.Display(viewModel);
            }
        }
        public void SwitchPlayer()
        {
            // Here will be the bot's logic for choosing a move

            currentPlayer = currentPlayer == player1 ? player2 : player1;
        }
        public bool HasWinner()
        {
            return Winner() != null ? true : false;
        }
        public bool IsGameEnded()
        {
            if (board.HasMoveForPlayer(player1.Symbol) || board.HasMoveForPlayer(player2.Symbol))
            {

                return false;
            }

            return true;
        }
        public char? Winner()
        {
            char? winner = null;
            int resPlayer1 = board.GameScore(player1.Symbol);
            int resPlayer2 = board.GameScore(player2.Symbol);
            if (resPlayer1 != resPlayer2)
            {
                winner = resPlayer1 > resPlayer2 ? player1.Symbol : player2.Symbol;
            }
            return winner;
        }

        // The method checks if the game is over, if the game is over,
        // it displays a message and starts a new game.
        public void GameEnded()
        {

            if (IsGameEnded())
            {
                stopwatch.Stop();
                string win;
                if (HasWinner())
                {
                    char winner = (char)Winner();
                    viewModel = new ViewModel
                    {
                        message = ReversiMessage.PlayerWins,
                        currentPlayer = winner,
                        board = board.GetGrid(),
                        gridSize = Board.Size,
                        scope = board.GameScore(winner)
                    };
                    currentView.Display(viewModel);
                    newGame = true;
                    win = winner == player1.Symbol ? "Win" : "Los";

                }
                else
                {
                    viewModel = new ViewModel
                    {
                        message = ReversiMessage.Draw,
                        board = board.GetGrid(),
                        gridSize = Board.Size
                    };
                    currentView.Display(viewModel);
                    newGame = true;
                    win = "draw";
                }
                int time = (int)stopwatch.Elapsed.TotalSeconds;
                int scope = board.GameScore('X');
                SaveStatistic(win, time, scope);
            }
        }
        private void SaveStatistic(string win, int time, int scope)
        {
            string line = win + " Time:" + time.ToString() + "c. Total:" + scope.ToString();
            using (StreamWriter outputFile = new StreamWriter("WriteLines.txt",true))
            {
                 outputFile.WriteLine(line);
            }
        }

    }
}
